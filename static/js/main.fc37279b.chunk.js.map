{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["yelp_params","mainFunction","callback","require","get","concat","headers","Authorization","params","categories","then","res","data","businesses","id","catch","err","console","log","alert","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stores","title","openInfoWindowMarkerId","handleInputChange","event","cancelable","persist","preventDefault","target","value","yelp","setState","handleFormSubmit","handleToggleOpen","markerId","handleToggleClose","CMap","withScriptjs","withGoogleMap","react_default","a","createElement","lib","defaultZoom","defaultCenter","lat","lng","children","_this2","coordinates","_this3","type","name","onChange","onClick","react","googleMapURL","loadingElement","style","height","containerElement","width","mapElement","center","map","restaurant","i","key","position","latitude","longitude","onCloseClick","Card_default","Img","variant","src","image_url","rating","Button_default","rel","href","url","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc37279b.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n    Marker,InfoWindow\n} from \"react-google-maps\";\n\nvar yelp_params= \"10455\"\n// sets default markers by passing yelp_params into the yelp api query string\n\nfunction mainFunction(callback) {\n     \n        const axios =require (\"axios\")\n       var str= axios\n         .get(\n           `${\"https://cors-anywhere.herokuapp.com/\"}https://api.yelp.com/v3/businesses/search?&location=`+yelp_params,\n           {\n             headers: {\n               Authorization: `Bearer ` + process.env.REACT_APP_YELP_KEY\n             }\n             ,\n             params: {\n               categories: \"healthmarkets\",\n             }\n           }\n         )\n         .then( res => {\n            callback(res.data)\n            return (res.data.businesses[0].id)\n            \n         })\n         .catch(err => {\n           console.log(err);\n           alert(\"please enter a city name or zip code\")\n         })\n\n          }\n         \nclass Map extends Component{\n \n  state = {\n    stores:[],\n    title:yelp_params,\n    openInfoWindowMarkerId: ''\n  };\n\n\n  componentDidMount() {\n    // once the component mounts, i make the call to the api\n    mainFunction((yelp)=>{console.log(yelp.businesses[0].coordinates);\n    this.setState({\n      stores: yelp.businesses,\n      title:yelp_params\n    });\n  \n  \n  })\n  }\n\n  handleInputChange = event => {\n    event.cancelable=false;\n    event.persist()\n    event.preventDefault();\n    console.log(event.target.value)\n    mainFunction((yelp)=>{\n    this.setState({\n      stores: yelp.businesses,\n      title: event.target.value,\n    });\n  \n  })\n \n  };\n  handleFormSubmit = event => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n\n    yelp_params=this.state.title\n    mainFunction((yelp)=>{\n      // Updating the input's state\n      yelp_params=this.state.title\n      this.setState({\n        stores: yelp.businesses,\n        title: yelp_params\n      });\n    \n    })\n  };\n\n    static defaultProps = {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\"+ process.env.REACT_APP_GOOGLE_KEY+ \"&v=3.exp&libraries=geometry,drawing,places\",\n    }\n\n    constructor(props) {\n        super(props);\n        mainFunction((yelp)=>{\n          console.log(yelp.businesses)\n\n        this.state = {\n          stores: yelp.businesses,\n        title: yelp_params,\n      }\n    })\n    }\n    \n    handleToggleOpen = (markerId) => {\n      this.setState({\n        openInfoWindowMarkerId: markerId\n      });\n  }\n\n  handleToggleClose = () => {\n      this.setState({\n        openInfoWindowMarkerId:\"\"\n      });\n  }\n\n\n    CMap = withScriptjs(withGoogleMap(props =>\n      \n        <GoogleMap\n          defaultZoom={10}\n          defaultCenter={{ lat:40.7799404643263, lng: -73.980282552649}}\n        >\n            {props.children}\n             \n        </GoogleMap>\n      ));\n\n    render() {\n        return (\n          \n\n<div>\n<form >\n  <label>\n    Enter a Location:\n    <input type=\"text\" name=\"name\"   \n        // line below takes away my ability to change the input\n    //  value={this.state.title}           \n  onChange={this.handleInputChange}\n/>\n<button onClick={this.handleFormSubmit} >Submit</button>\n\n  </label>\n</form>\n          \n            <Fragment>\n                <this.CMap\n                  googleMapURL={this.props.googleMapURL}\n                    \n                    loadingElement={<div style={{ height: `100%` }} />}\n                    containerElement={<div style={{width:\"40vw\", height:\"80vh\"}} />}\n                    mapElement={<div style={{ height: `100%` }} />}\n                    center= {{ lat: 25.03, lng: 121.6 }} \n                >\n\n                   {this.state.stores.map((restaurant,i) => (\n        <Marker\n                    \n          key={i}\n          position={{\n            lat: restaurant.coordinates.latitude,\n            lng: restaurant.coordinates.longitude\n          }}\n          \n          onClick={() => this.handleToggleOpen(i)}\n          \n        >\n                { \n\n                this.state.openInfoWindowMarkerId===i&&\n \n          <InfoWindow \n          onCloseClick={() => this.handleToggleClose(i)\n          }\n\n          position={{\n            lat: restaurant.coordinates.latitude,\n            lng: restaurant.coordinates.longitude\n          }}\n        >\n                 <Card style={{ width: '6rem' }}>\n                 <Card.Img variant=\"top\"  src={restaurant.image_url} style={{ width: '50%' }} />               \n                <p>rating: {restaurant.rating} <Card.Img variant=\"top\"  src=\"http://pluspng.com/img-png/yellow-stars-png-hd-golden-star-rotate-3d-render-footage-in-4k-chroma-key-green-screen-852.jpg\" style={{ width: '25%' }} /></p>\n            <Button variant=\"outline-success\"rel=\"noreferrer noopener\" target=\"_blank\" href={restaurant.url} >{restaurant.name}</Button>\n            </Card>\n        </InfoWindow>\n         }\n        </Marker>\n      ))}\n                </this.CMap>\n            </Fragment>\n            </div>\n        );\n    }\n}\n\nexport default Map;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}